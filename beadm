#!/bin/sh -e

# pve-beadm: an extremely simplified version of the FreeBSD beadm tool, 
# that can be used with Proxmox VE 6 to enable atomic upgrades and rollbacks
# 
# You should probably not use this unless you've read the code and 
# know what's going on. I'm not to blame if you use it and something breaks 

# Copyright (c) 2019-2019 tactical-documentation
# Copyright (c) 2012-2019 Slawomir Wojciech Wojtczak (vermaden)
# Copyright (c) 2012-2013 Bryan Drewery (bdrewery)
# Copyright (c) 2012-2013 Mike Clarke (rawthey)
# Copyright (c) 2013      Dancho Penev (dpslavov)
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that following conditions are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS 'AS IS' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

unset LC_ALL
unset LANG
PATH=${PATH}:/bin:/usr/bin:/usr/local/bin:/sbin:/usr/sbin:/usr/local/sbin


if [ ! -f /etc/kernel/cmdline.template ] || ! $(grep -q "__BE_NAME" /etc/kernel/cmdline.template)
then
  echo "ERROR: /etc/kernel/cmdline.template not found!"
  echo
  echo "You need a template file for the kernel commandline."
  echo "The template file has to be identical to the /etc/kernel/cmdline file, but instead of a specific root it must contain the string \"__BE_NAME\""
  echo "The template file is used in order to create a valid kernel commandline for systemd-boot, which points to the correct boot environment." 
  echo
  echo "In order to use beadm, create a valid /etc/kernel/cmdline.template"
  echo   
  echo "Example: if your /etc/kernel/cmdline looks like this:"
  echo "         root=ZFS=rpool/ROOT/pve-1 boot=zfs"
  echo "         then the template file should contain:"
  echo "         root=ZFS=rpool/ROOT/__BE_NAME boot=zfs"
  echo
  exit 1
fi

if [ "$( uname -r | cut -d '-' -f3)" != "pve" ]
then
  echo "ERROR: This version of beadm works on Proxmox, your kernel (uname -r) does not end with '-pve'"
  exit 1
fi

if [ "${1}" = "--version" -o "${1}" = "-version" -o "${1}" = "version" ]
then
  echo "beadm 0.6.1 2019/10/06"
  echo "This is a PoC, use only after reading the code!"
  exit 0
fi

__usage() {
  local NAME=${0##*/}
  echo "usage:"
  echo "  ${NAME} activate <beName>"
  echo "  ${NAME} create [-e nonActiveBe | -e beName@snapshot] <beName>"
  echo "  ${NAME} create <beName@snapshot>"
  echo "  ${NAME} destroy [-F] <beName | beName@snapshot>"
  echo "  ${NAME} list [-a] [-s] [-D] [-H]"
  echo "  ${NAME} rename <origBeName> <newBeName>"
  echo "  ${NAME} mount <beName> [mountpoint]"
  echo "  ${NAME} { umount | unmount } [-f] <beName>"
  echo "  ${NAME} init <beName>"
  echo "  ${NAME} version"
  exit 1
}

# check if boot environment exists
__be_exist() { # 1=DATASET
  if ! zfs list -H -o name ${1} 1> /dev/null 2> /dev/null
  then
    echo "ERROR: Boot environment '${1##*/}' does not exist"
    exit 1
  fi
}

# check if argument is a snapshot
__be_snapshot() { # 1=DATASET/SNAPSHOT
  echo "${1}" | grep -q "@" 2> /dev/null
}

# check if boot environment is mounted
__be_mounted() { # 1=BE
  mount 2> /dev/null | grep -q -E "^${1} " 2> /dev/null
}

# check if boot environment is a clone
__be_clone() { # 1=DATASET
  if zfs list ${1} 1> /dev/null 2> /dev/null
  then
    local ORIGIN="$( zfs list -H -o origin ${1} )"
    if [ "${ORIGIN}" = "-" ]
    then
      # boot environment is not a clone
      return 1
    else
      # boot environment is a clone
      return 0
    fi
  else
    # boot environment does not exist
    return 2
  fi
}

__get_active_be_from_esp() {
  if [ ! -f /tmp/beadm/loader.conf ]
  then
    mount /dev/disk/by-uuid/$(cat /etc/kernel/pve-efiboot-uuids | head -n 1) /boot/efi
    mkdir -p /tmp/beadm/
    cp /boot/efi/loader/loader.conf /tmp/beadm/loader.conf
    default_entry="$(cat /tmp/beadm/loader.conf | grep default | cut -d ' ' -f2 | sed 's/-\*$//')"
    next_boot_environment="$(cat /boot/efi/loader/entries/$(ls /boot/efi/loader/entries/ | grep $default_entry | head -n 1) | grep options | tr ' ' '\n' | grep root= | cut -d '/' -f3)"
    echo $next_boot_environment > /tmp/beadm/next_boot_environment

    if [ ! -d /boot/efi/env/$next_boot_environment ]
    then
      echo 
      echo "WARNING! There is no Boot Environment for $next_boot_environment!"
      echo "         Use 'beadm init $next_boot_environment' to generate the necessary files on the EFI System Partitions"
      echo 
    fi
    umount /boot/efi
  fi
}


# create new boot environment
__be_new() { # 1=SOURCE 2=TARGET
  local NAME_NEW=$( basename "${2}" )
  local NAME_SANITY=$( echo "${NAME_NEW}" | tr -c -d 'a-zA-Z0-9-_.,' )
  if [ "${NAME_NEW}" != "${NAME_SANITY}" ]
  then
    echo "ERROR: Can not create boot environment with '${NAME_NEW}' name"
    echo
    echo "Allowed characters for boot environment are:"
    echo "  alphanumeric characters: 'a-z' 'A-Z' '0-9'"
    echo "  hypen: '-'"
    echo "  underscore: '_'"
    echo "  dot: '.'"
    echo "  comma: ','"
    echo
    echo "Name '${NAME_SANITY}' which uses only allowed characters can be used"
    echo
    exit 1
  fi
  unset NAME_NEW
  unset NAME_SANITY
  local SOURCE=$( echo ${1} | cut -d '@' -f 1 )
  local ENTROPY=0

  # create snapshot that will be used as a base for new boot environment
  if __be_snapshot ${1}
  then
    # create boot environment from snapshot
    local SNAPSHOT=$( echo ${1} | cut -d '@' -f 2 )
    zfs list -r -H -t filesystem -o name ${SOURCE} \
      | while read FS
        do
          if ! zfs list -H -o name ${FS}@${SNAPSHOT} 1> /dev/null 2> /dev/null
          then
            echo "ERROR: Child snapshot '${FS}@${SNAPSHOT}' does not exist"

            exit 1
          fi
        done
  else
    # create boot environment from other boot environment
    if zfs list -H -o name ${1}@${2##*/} 1> /dev/null 2> /dev/null
    then
      echo "ERROR: Snapshot '${1}@${2##*/}' already exists"
      exit 1
    fi
    # snapshot format
    FMT=$( date "+%Y-%m-%d-%H:%M:%S" )
    if ! zfs snapshot -r ${1}@${FMT} 1> /dev/null 2> /dev/null
    then
      echo "ERROR: Cannot create snapshot '${1}@${FMT}'"
      exit 1
    fi
  fi


  # clone properties of source boot environment
  zfs list -H -o name -r ${SOURCE} \
    | grep -v '@' \
    | while read FS
      do
        local OPTS=""
        while read NAME PROPERTY VALUE
        do
          if [ "${VALUE}" != "" ]
          then
            local OPTS="-o ${PROPERTY}=\"${VALUE}\" ${OPTS}"
          else
            local OPTS=""
            break
          fi
        done << EOF
$( zfs get -o name,property,value -s local,received -H all ${FS} | awk '!/[\t ]canmount[\t ]/' )
EOF
        DATASET=$( echo ${FS} | awk '{print $1}' | sed -E s/"^${POOL}\/${BEDS}\/${SOURCE##*/}"/"${POOL}\/${BEDS}\/${2##*/}"/g )
        if __be_snapshot ${1}
        then
          eval "zfs clone -o canmount=off ${OPTS} ${FS}@${1##*@} ${DATASET}"
        else
          eval "zfs clone -o canmount=off ${OPTS} ${FS}@${FMT} ${DATASET}"
        fi
      done
}

ROOTFS=$( mount | awk '/ \/ / {print $1}' )

POOL=$( echo ${ROOTFS} | awk -F '/' '{print $1}' )

if [ $( echo ${ROOTFS} | awk -F '/' '{print NF}' ) -lt 3 ]
then
  echo "ERROR: This system is not configured for boot environments"
  exit 1
fi

BOOTFS=$( zpool list -H -o bootfs ${POOL} )

if [ -z "${BOOTFS}" -o "${BOOTFS}" = "-" ]
then
 echo "ERROR: ZFS boot pool '${POOL}' has unset 'bootfs' property"
 exit 1
fi

# use other prefix then the 'pool/ROOT/bename' default
: ${BEDS="$( echo ${ROOTFS} | awk -F '/' '{print $2}' )"}

case ${1} in

  (list) # --------------------------------------------------------------------
    echo "Boot Environments on $(hostname):"
    zfs_list="$(zfs list -H -t filesystem,snapshot,volume -s creation -o name,used,usedds,usedbysnapshots,usedrefreserv,refer,creation,origin -r $POOL/$BEDS | grep "^$POOL/$BEDS/" | sed 's/\t/,/g;s/\n/;/g;s/ /_/g')"

    #echo $zfs_list

    __get_active_be_from_esp

    printf "%-20s %-10s %-10s %-7s %-8s %-7s %-7s %-30s %-10s\n" name state used ds snaps ubrr refs "creation date" origin
    printf "%-20s %-10s %-10s %-7s %-8s %-7s %-7s %-30s %-10s\n" ---- ----- ---- -- ----- ---- ---- --------------------- ------
    for line in $(echo $zfs_list | tr ';' '\n'); do
      BE_NAME="$(echo $line | cut -d ',' -f1 | sed "s/^$POOL\/$BEDS\///")"
      BE_ACTIVE="$(if [ "$ROOTFS" = "$(echo $line | cut -d ',' -f1)" ]; then echo N; else echo ' '; fi)"
      BE_NEXT="$(if [ "$BE_NAME" = "$(cat /tmp/beadm/next_boot_environment)" ]; then echo R; else echo ' '; fi)"
      BE_STATE="$(if [ "$BE_ACTIVE$BE_NEXT" = "  " ]; then echo "-"; else echo "$BE_ACTIVE$BE_NEXT"; fi)"
      BE_USED="$(echo $line | cut -d ',' -f2)"
      BE_USEDDS="$(echo $line | cut -d ',' -f3)"
      BE_USEDBYSNAPSHOTS="$(echo $line | cut -d ',' -f4)"
      BE_USEDREFRESERV="$(echo $line | cut -d ',' -f5)"
      BE_REFER="$(echo $line | cut -d ',' -f6)"
      BE_DATE="$(echo $line | cut -d ',' -f7 | sed 's/_/ /g')"
      BE_ORIGIN="$(echo $line | cut -d ',' -f8)"
      

      if ! echo $line | cut -d ',' -f 1 | grep -q "@"; then
        printf "%-20s %-10s %-10s %-7s %-8s %-7s %-7s %-30s %-10s\n" $BE_NAME $BE_STATE $BE_USED $BE_USEDDS $BE_USEDBYSNAPSHOTS $BE_USEDREFRESERV $BE_REFER "$BE_DATE" "$BE_ORIGIN"
      fi 
    done
    ;;

  (init) # ------------------------------------------------------------------
    case ${#} in
      (2)
        be_name="${2}"
        ;;
      (*)
        __usage
        ;;
    esac

    if $(zfs get canmount rpool/ROOT/$be_name | grep -q on)
    then 
      zfs set canmount=off ${POOL}/${BEDS}/$be_name
    fi
    
    __get_active_be_from_esp
    
    mount /dev/disk/by-uuid/$(cat /etc/kernel/pve-efiboot-uuids | head -n 1) /boot/efi
    if [ -d /boot/efi/env/$be_name ]
    then 
      echo "ERROR! $be_name already exists!"
      umount /boot/efi
      exit 1
    fi
    umount /boot/efi


    old_be_name="$(cat /etc/kernel/cmdline | tr ' ' '\n' | grep root | cut -d '/' -f3)"

    cat /etc/kernel/cmdline.template | sed "s/__BE_NAME/$be_name/" > /etc/kernel/cmdline

    pve-efiboot-tool refresh

    cat /etc/kernel/cmdline.template | sed "s/__BE_NAME/$old_be_name/" > /etc/kernel/cmdline

    for esp in $(cat /etc/kernel/pve-efiboot-uuids)
    do
      mount /dev/disk/by-uuid/$esp /boot/efi


      mkdir -p /boot/efi/env/$be_name
      cp -r /boot/efi/EFI/proxmox/* /boot/efi/env/$be_name/
      cat /boot/efi/loader/loader.conf | sed "/default/c\default $be_name-*" > /boot/efi/env/$be_name/loader.conf
      for entry in $(ls /boot/efi/loader/entries/ | grep proxmox-.*-pve.conf)
      do
        new_entry="$(echo $entry | sed "s/proxmox/$be_name/;s/-pve//")"
        cp /boot/efi/loader/entries/$entry /boot/efi/loader/entries/$new_entry
        sed -i "s/EFI/env/" /boot/efi/loader/entries/$new_entry
        sed -i "s/proxmox/$be_name/" /boot/efi/loader/entries/$new_entry
        sed -i "s/Proxmox Virtual Environment/$be_name/" /boot/efi/loader/entries/$new_entry 
      done
      rm -f /boot/efi/loader/loader.conf
      cp /tmp/beadm/loader.conf /boot/efi/loader/loader.conf
      umount /boot/efi
    done

    echo "Boot Environment for $be_name has been generated successfully!"

    ;; 

  (create) # ------------------------------------------------------------------
    
    be_name=""

    case ${#} in
      (4)
        if ! [ ${2} = "-e" ]
        then
          __usage
        fi
        # check if argument for -e option is full path dataset
        # argument for -e option must be 'beName' or 'beName@snapshot'
        if echo ${3} | grep -q "/" 2> /dev/null
        then
          __usage
        fi
        __be_exist ${POOL}/${BEDS}/${3}
        if zfs list -H -o name ${POOL}/${BEDS}/${4} 1> /dev/null 2> /dev/null
        then
          echo "ERROR: Boot environment '${4}' already exists"
          exit 1
        fi
        __be_new ${POOL}/${BEDS}/${3} ${POOL}/${BEDS}/${4}
        be_name="${4}"
        ;;
      (2)
        if __be_snapshot ${2}
        then
          if ! zfs snapshot -r ${POOL}/${BEDS}/${2} 1> /dev/null 2> /dev/null
          then
            echo "ERROR: Cannot create '${2}' recursive snapshot"
            exit 1
          fi
        else
          __be_new ${ROOTFS} ${POOL}/${BEDS}/${2}
          be_name="${2}"
        fi
        ;;
      (*)
        __usage
        ;;
    esac

    # if we reach this point ${POOL}/${BEDS}/$be_name has been created, set canmount=off
    zfs set canmount=off ${POOL}/${BEDS}/$be_name

    __get_active_be_from_esp
    
    old_be_name="$(cat /etc/kernel/cmdline | tr ' ' '\n' | grep root | cut -d '/' -f3)"

    cat /etc/kernel/cmdline.template | sed "s/__BE_NAME/$be_name/" > /etc/kernel/cmdline

    pve-efiboot-tool refresh

    cat /etc/kernel/cmdline.template | sed "s/__BE_NAME/$old_be_name/" > /etc/kernel/cmdline

    for esp in $(cat /etc/kernel/pve-efiboot-uuids)
    do
      mount /dev/disk/by-uuid/$esp /boot/efi
      mkdir -p /boot/efi/env/$be_name
      cp -r /boot/efi/EFI/proxmox/* /boot/efi/env/$be_name/
      cat /boot/efi/loader/loader.conf | sed "/default/c\default $be_name-*" > /boot/efi/env/$be_name/loader.conf
      for entry in $(ls /boot/efi/loader/entries/ | grep proxmox-.*-pve.conf)
      do
        new_entry="$(echo $entry | sed "s/proxmox/$be_name/;s/-pve//")"
        cp /boot/efi/loader/entries/$entry /boot/efi/loader/entries/$new_entry
        sed -i "s/EFI/env/" /boot/efi/loader/entries/$new_entry
        sed -i "s/proxmox/$be_name/" /boot/efi/loader/entries/$new_entry
        sed -i "s/Proxmox Virtual Environment/$be_name/" /boot/efi/loader/entries/$new_entry 
      done
      rm /boot/efi/loader/loader.conf
      cp /tmp/beadm/loader.conf /boot/efi/loader/loader.conf
      umount /boot/efi
    done

    echo "Created successfully"

    ;;

  (activate) # ----------------------------------------------------------------
    be_name="${2}"

    switch="true"

    for esp in $(cat /etc/kernel/pve-efiboot-uuids)
    do
      mount /dev/disk/by-uuid/$esp /boot/efi
      rm -f /boot/efi/loader/loader.conf

      if [ ! -f /boot/efi/env/$be_name/loader.conf ]
      then
        echo "ERROR! File not found: /boot/efi/env/$be_name/loader.conf"
        echo "       Are you sure that the Boot Environment for $be_name has been initialized?"
        echo "       If not try: 'beadm init $be_name"
        umount /boot/efi
        exit 1   
      fi

      cp /boot/efi/env/$be_name/loader.conf /boot/efi/loader/loader.conf

      if $switch
      then
        mkdir -p /tmp/beadm
        cp /boot/efi/env/$be_name/loader.conf /tmp/beadm/loader.conf
        echo $be_name > /tmp/beadm/next_boot_environment
        switch="false"
      fi
      umount /boot/efi
    done
   
    echo "$be_name has been activated successfully"

    ;;

  (destroy) # -----------------------------------------------------------------
    if [ "${2}" != "-F" ]
    then
      DESTROY=${2}
      be_name="${2}"
    else
      DESTROY=${3}
      be_name="${3}"
    fi
    __be_exist ${POOL}/${BEDS}/${DESTROY}
    case ${#} in
      (2)
        echo "Are you sure you want to destroy '${2}'?"
        echo -n "This action cannot be undone (y/[n]): "
        read CHOICE
        ;;
      (3)
        if [ "${2}" != "-F" ]
        then
          __usage
        fi
        CHOICE=Y
        ;;
      (*)
        __usage
        ;;
    esac
    if [ "${BOOTFS}" = "${POOL}/${BEDS}/${DESTROY}" ]
    then
      echo "ERROR: Cannot destroy active boot environment"
      exit 1
    fi
    case ${CHOICE} in
      (Y|y|[Yy][Ee][Ss])
        # destroy snapshot or boot environment
        if __be_snapshot ${POOL}/${BEDS}/${DESTROY}
        then
          # destroy desired snapshot
          if ! zfs destroy -r ${POOL}/${BEDS}/${DESTROY} 1> /dev/null 2> /dev/null
          then
            echo "ERROR: Snapshot '${2}' is origin for other boot environment"
            exit 1
          fi
        else
          if __be_clone ${POOL}/${BEDS}/${DESTROY}
          then
            # promote clones dependent on snapshots used by destroyed boot environment
            zfs list -H -t filesystem,snapshot,volume -o name,origin -r ${POOL} \
              | while read NAME ORIGIN
                do
                  if echo "${ORIGIN}" | grep -q -E "${POOL}/${BEDS}/${DESTROY}(/.*@|@)" 2> /dev/null
                  then
                    zfs promote ${NAME}
                  fi
                done
            # get origins used by destroyed boot environment
            ORIGIN_SNAPSHOTS=$( zfs list -H -t filesystem,snapshot,volume -o origin -r ${POOL}/${BEDS}/${DESTROY} | grep -v '^-$' | awk -F "@" '{print $2}' | sort -u )
          fi
          # check if boot environment was created from existing snapshot
          ORIGIN=$( zfs list -H -o origin ${POOL}/${BEDS}/${DESTROY} )
          CREATION=$( zfs list -H -o creation ${POOL}/${BEDS}/${DESTROY} )

          #FreeBSD's Date works differently than the GNU date, here we want to convert between formats:
          #CREATION=$( date -f "%a %b %d %H:%M %Y" "${CREATION}" +"%Y-%m-%d-%H:%M" )
          CREATION=$( date -d "${CREATION}" +"%Y-%m-%d-%H:%M" )

          SNAPSHOT_NAME=$( echo "${ORIGIN}" | cut -d '@' -f 2 | sed -E 's/:[0-9]{2}$//g' )
          if [ "${2}" = "-F" ]
          then
            CHOICE=1
          elif [ "${SNAPSHOT_NAME}" != "${CREATION}" ]
          then
            ORIGIN=$( basename ${ORIGIN} )
            echo "Boot environment '${DESTROY}' was created from existing snapshot"
            echo -n "Destroy '${ORIGIN}' snapshot? (y/[n]): "
            read CHOICE
            case ${CHOICE} in
              (Y|y|[Yy][Ee][Ss])
                CHOICE=1
                ;;
              (*)
                CHOICE=0
                echo "Origin snapshot '${ORIGIN}' will be preserved"
                ;;
            esac
          else
            CHOICE=1
          fi
          # destroy boot environment
          zfs destroy -r ${POOL}/${BEDS}/${DESTROY}
           # check if boot environment is a clone
          if __be_clone ${POOL}/${BEDS}/${DESTROY}
          then
            # promote datasets dependent on origins used by destroyed boot environment
            ALL_ORIGINS=$( zfs list -H -t filesystem,snapshot,volume -o name,origin -r ${POOL} )
            echo "${ORIGIN_SNAPSHOTS}" \
              | while read S
                do
                  echo "${ALL_ORIGINS}" \
                    | grep "${S}" \
                    | awk '{print $1}' \
                    | while read I
                      do
                        zfs promote ${I}
                      done
                done
          fi
          # destroy origins used by destroyed boot environment
          SNAPSHOTS=$( zfs list -H -t snapshot -o name -r ${POOL} )
          echo "${ORIGIN_SNAPSHOTS}" \
            | while read S
              do
                echo "${SNAPSHOTS}" \
                  | grep "@${S}$" \
                  | while read I
                    do
                      if [ ${CHOICE} -eq 1 ]
                      then
                        zfs destroy ${I}
                      fi
                    done
              done
        fi
        
        for esp in $(cat /etc/kernel/pve-efiboot-uuids)
        do
          mount /dev/disk/by-uuid/$esp /boot/efi
          rm -rf /boot/efi/env/$be_name/
          for entry in $(ls /boot/efi/loader/entries/ | grep $be_name)
          do 
            rm -f /boot/efi/loader/entries/$entry
          done
          umount /boot/efi
        done

        echo "Destroyed successfully"
        ;;
      (*)
        echo "Boot environment '${DESTROY}' has not been destroyed"
        ;;
    esac
    ;;

  (rename) # ------------------------------------------------------------------
    if [ ${#} -ne 3 ]
    then
      __usage
    fi
    __be_exist ${POOL}/${BEDS}/${2}
    if zfs list -H -o name ${POOL}/${BEDS}/${3} 2> /dev/null
    then
      echo "ERROR: Boot environment '${3}' already exists"
      exit 1
    fi
    zfs rename ${POOL}/${BEDS}/${2} ${POOL}/${BEDS}/${3}

    be_name=${2}
    new_be_name=${3}
 
    for esp in $(cat /etc/kernel/pve-efiboot-uuids)
    do

      mount /dev/disk/by-uuid/$esp /boot/efi
      mv /boot/efi/env/$be_name/ /boot/efi/env/$new_be_name/
      sed -i "s/$be_name/$new_be_name/" /boot/efi/env/$new_be_name/loader.conf
      sed -i "s/$be_name/$new_be_name/" /boot/efi/loader/loader.conf
      for entry in $(ls /boot/efi/loader/entries/ | grep $be_name)
      do 
        sed -i "s/$be_name/$new_be_name/" /boot/efi/loader/entries/$entry
        new_entry_name=$(echo $entry | sed "s/$be_name/$new_be_name/")
        mv /boot/efi/loader/entries/$entry /boot/efi/loader/entries/$new_entry_name
      done
      umount /boot/efi
    done

    echo $new_be_name > /tmp/beadm/next_boot_environment
    sed -i "/default $be_name-*/c\default $new_be_name-*" /tmp/beadm/loader.conf

    ;;

  (mount) # ------------------------------------------------------------
    if [ ${#} -eq 2 ]
    then
      TARGET=$( mktemp -d -t BE-${2} )
    elif [ ${#} -eq 3 ]
    then
      TARGET=${3}
    else
      __usage
    fi
    __be_exist "${POOL}/${BEDS}/${2}"
    if __be_mounted "${POOL}/${BEDS}/${2}"
    then
      MNT=$( mount | grep -E "^${POOL}/${BEDS}/${2} " | awk '{print $3}' )
      echo "Boot environment '${2}' is already mounted at '${MNT}'"
      exit 1
    fi
    if ! mkdir -p ${TARGET} 2> /dev/null
    then
      echo "ERROR: Cannot create '${TARGET}' mountpoint"
      exit 1
    fi
    if ! mount -t zfs -o zfsutil ${POOL}/${BEDS}/${2} ${TARGET}
    then
      echo "ERROR: Cannot mount '${2}' at '${TARGET}' mountpoint"
      exit 1
    fi
    zfs list -H -o name,mountpoint -r ${POOL}/${BEDS}/${2} \
      | grep -v -E "[[:space:]](legacy|none)$" \
      | sort -n \
      | grep -E "^${POOL}/${BEDS}/${2}/" \
      | while read FS MOUNTPOINT
        do
          if [ "{FS}" != "${POOL}/${BEDS}/${2}" ]
          then
            INHERIT=$( zfs get -H -o source mountpoint ${FS} )
            if [ "${INHERIT}" = "local" ]
            then
              case ${MOUNTPOINT} in
                (legacy|none)
                  continue
                  ;;
                (*)
                  MOUNTPOINT="/$( echo "${FS}" | sed s^"${POOL}/${BEDS}/${2}/"^^g )"
                  ;;
              esac
            fi
          fi
          if ! mkdir -p ${TARGET}${MOUNTPOINT} 1> /dev/null 2> /dev/null
          then
            echo "ERROR: Cannot create '${TARGET}${MOUNTPOINT}' mountpoint"
            exit 1
          fi
          if ! mount -t zfs ${FS} ${TARGET}${MOUNTPOINT} 1> /dev/null 2> /dev/null
          then
            echo "ERROR: Cannot mount '${FS}' at '${TARGET}${MOUNTPOINT}' mountpoint"
            exit 1
          fi
        done
    echo "Mounted successfully on '${TARGET}'"

    ;;

  (umount|unmount) # ----------------------------------------------------------
    if [ ${#} -eq 2 ]
    then
      # we need this empty section for argument checking
      :
    elif [ ${#} -eq 3 -a "${2}" = "-f" ]
    then
      OPTS="-f"
      shift
    else
      __usage
    fi
    __be_exist "${POOL}/${BEDS}/${2}"
    if ! __be_mounted "${POOL}/${BEDS}/${2}"
    then
      echo "Boot environment '${2}' is not mounted"
      exit 1
    fi
    MOUNT=$( mount )
    MOUNTPOINT=$( echo "${MOUNT}" | grep -m 1 "^${POOL}/${BEDS}/${2} on " | awk '{print $3}' )
    echo "${MOUNT}" \
      | awk '{print $1}' \
      | grep -E "^${POOL}/${BEDS}/${2}(/|$)" \
      | sort -n -r \
      | while read FS
        do
          if ! umount ${OPTS} ${FS} 1> /dev/null 2> /dev/null
          then
            echo "ERROR: Cannot umount '${FS}' dataset"
            exit 1
          fi
        done
    echo "Unmounted successfully"
    # only delete the temporary mountpoint directory
    if echo "${MOUNTPOINT}" | grep -q -E "/BE-${2}\.[a-zA-Z0-9]{8}" 1> /dev/null 2> /dev/null
    then
      # delete only when it is an empty directory
      if [ $( find ${MOUNTPOINT} | head | wc -l | bc ) -eq 1 ]
      then
        rm -r ${MOUNTPOINT}
      fi
    fi
    ;;

  (*) # -----------------------------------------------------------------------
    __usage
    ;;

esac
